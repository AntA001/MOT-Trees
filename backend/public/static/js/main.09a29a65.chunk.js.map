{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","logoutTimer","MainHeader","children","NavLinks","auth","useContext","to","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","UserTrees","React","lazy","MapDeckGl","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","exact","Provider","value","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.09a29a65.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  userId: null,\r\n  token: null,\r\n  login: () => {},\r\n  logout: () => {}\r\n});\r\n","import React from 'react';\r\n\r\nimport './LoadingSpinner.css';\r\n\r\nconst LoadingSpinner = props => {\r\n  return (\r\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\r\n      <div className=\"lds-dual-ring\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n    document.getElementById('backdrop-hook')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","import { useState, useCallback, useEffect } from 'react';\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(false);\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n  const [userId, setUserId] = useState(false);\r\n\r\n  const login = useCallback((uid, token, expirationDate) => {\r\n    setToken(token);\r\n    setUserId(uid);\r\n    const tokenExpirationDate =\r\n      expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n    setTokenExpirationDate(tokenExpirationDate);\r\n    localStorage.setItem(\r\n      'userData',\r\n      JSON.stringify({\r\n        userId: uid,\r\n        token: token,\r\n        expiration: tokenExpirationDate.toISOString()\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null);\r\n    setTokenExpirationDate(null);\r\n    setUserId(null);\r\n    localStorage.removeItem('userData');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remainingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem('userData'));\r\n    if (\r\n      storedData &&\r\n      storedData.token &&\r\n      new Date(storedData.expiration) > new Date()\r\n    ) {\r\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n    }\r\n  }, [login]);\r\n\r\n  return { token, login, logout, userId };\r\n};","import React from 'react';\r\n\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = props => {\r\n  return <header className=\"main-header\">{props.children}</header>;\r\n};\r\n\r\nexport default MainHeader;\r\n","import React, { useContext } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../context/auth-context\";\r\nimport \"./NavLinks.css\";\r\n\r\nconst NavLinks = (props) => {\r\n\tconst auth = useContext(AuthContext);\r\n\r\n\treturn (\r\n\t\t<ul className='nav-links'>\r\n\t\t\t{auth.isLoggedIn && (\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink to={\"/trees\"}>Τα δέντρα μου</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t\t{auth.isLoggedIn && (\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink to={\"/map\"}>Χάρτης δέντρων</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t\t{!auth.isLoggedIn && (\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<NavLink to='/auth'>Σύνδεση</NavLink>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t\t{auth.isLoggedIn && (\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<button onClick={auth.logout}>Αποσύνδεση</button>\r\n\t\t\t\t</li>\r\n\t\t\t)}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport './SideDrawer.css';\r\n\r\nconst SideDrawer = props => {\r\n  const content = (\r\n    <CSSTransition\r\n      in={props.show}\r\n      timeout={200}\r\n      classNames=\"slide-in-left\"\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\r\n    </CSSTransition>\r\n  );\r\n\r\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport MainHeader from \"./MainHeader\";\r\nimport NavLinks from \"./NavLinks\";\r\nimport SideDrawer from \"./SideDrawer\";\r\nimport Backdrop from \"../UIElements/Backdrop\";\r\nimport \"./MainNavigation.css\";\r\n\r\nconst MainNavigation = (props) => {\r\n\tconst [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n\tconst openDrawerHandler = () => {\r\n\t\tsetDrawerIsOpen(true);\r\n\t};\r\n\r\n\tconst closeDrawerHandler = () => {\r\n\t\tsetDrawerIsOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}\r\n\t\t\t<SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n\t\t\t\t<nav className='main-navigation__drawer-nav'>\r\n\t\t\t\t\t<NavLinks />\r\n\t\t\t\t</nav>\r\n\t\t\t</SideDrawer>\r\n\r\n\t\t\t<MainHeader>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='main-navigation__menu-btn'\r\n\t\t\t\t\tonClick={openDrawerHandler}>\r\n\t\t\t\t\t<span />\r\n\t\t\t\t\t<span />\r\n\t\t\t\t\t<span />\r\n\t\t\t\t</button>\r\n\t\t\t\t<h1 className='main-navigation__title'>\r\n\t\t\t\t\t<Link to='/'>MOT Trees</Link>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<nav className='main-navigation__header-nav'>\r\n\t\t\t\t\t<NavLinks />\r\n\t\t\t\t</nav>\r\n\t\t\t</MainHeader>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default MainNavigation;\r\n","import React, { Suspense } from \"react\";\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n\tRedirect,\r\n\tSwitch,\r\n} from \"react-router-dom\";\r\nimport LoadingSpinner from \"./shared/components/UIElements/LoadingSpinner\";\r\nimport MainNavigation from \"./shared/components/Navigation/MainNavigation\";\r\nimport { AuthContext } from \"./shared/context/auth-context\";\r\nimport { useAuth } from \"./shared/hooks/auth-hook\";\r\n\r\nconst UserTrees = React.lazy(() => import(\"./trees/pages/UserTrees\"));\r\nconst MapDeckGl = React.lazy(() => import(\"./trees/pages/MapDeckGl\"));\r\nconst Auth = React.lazy(() => import(\"./user/pages/Auth\"));\r\n\r\nconst App = () => {\r\n\tconst { token, login, logout, userId } = useAuth();\r\n\r\n\tlet routes;\r\n\r\n\tif (token) {\r\n\t\troutes = (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path='/trees' exact>\r\n\t\t\t\t\t<UserTrees />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/map' exact>\r\n\t\t\t\t\t<MapDeckGl />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/' exact>\r\n\t\t\t\t\t<UserTrees />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Redirect to='/trees' />\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t} else {\r\n\t\troutes = (\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path='/' exact>\r\n\t\t\t\t\t<Auth />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route path='/auth'>\r\n\t\t\t\t\t<Auth />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Redirect to='/' />\r\n\t\t\t</Switch>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<AuthContext.Provider\r\n\t\t\tvalue={{\r\n\t\t\t\tisLoggedIn: !!token,\r\n\t\t\t\ttoken: token,\r\n\t\t\t\tuserId: userId,\r\n\t\t\t\tlogin: login,\r\n\t\t\t\tlogout: logout,\r\n\t\t\t}}>\r\n\t\t\t<Router>\r\n\t\t\t\t<MainNavigation />\r\n\t\t\t\t<main>\r\n\t\t\t\t\t<Suspense\r\n\t\t\t\t\t\tfallback={\r\n\t\t\t\t\t\t\t<div className='center'>\r\n\t\t\t\t\t\t\t\t<LoadingSpinner />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t{routes}\r\n\t\t\t\t\t</Suspense>\r\n\t\t\t\t</main>\r\n\t\t\t</Router>\r\n\t\t</AuthContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n"," // This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t  // [::1] is the IPv6 localhost address.\r\n\t  window.location.hostname === '[::1]' ||\r\n\t  // 127.0.0.0/8 are considered localhost for IPv4.\r\n\t  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n\tconsole.log(\"registering service worker...\")\r\n\tif ('serviceWorker' in navigator) {\r\n\t  // The URL constructor is available in all browsers that support SW.\r\n\t  const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t  if (publicUrl.origin !== window.location.origin) {\r\n\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\treturn;\r\n\t  }\r\n  \r\n\t  window.addEventListener('load', () => {\r\n\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n\t\tif (isLocalhost) {\r\n\t\t  // This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t  checkValidServiceWorker(swUrl, config);\r\n  \r\n\t\t  // Add some additional logging to localhost, pointing developers to the\r\n\t\t  // service worker/PWA documentation.\r\n\t\t  navigator.serviceWorker.ready.then(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t  'This web app is being served cache-first by a service ' +\r\n\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\r\n\t\t\t);\r\n\t\t  });\r\n\t\t} else {\r\n\t\t  // Is not localhost. Just register service worker\r\n\t\t  registerValidSW(swUrl, config);\r\n\t\t}\r\n\t  });\r\n\t}\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t  .register(swUrl)\r\n\t  .then((registration) => {\r\n\t\tregistration.onupdatefound = () => {\r\n\t\t  const installingWorker = registration.installing;\r\n\t\t  if (installingWorker == null) {\r\n\t\t\treturn;\r\n\t\t  }\r\n\t\t  installingWorker.onstatechange = () => {\r\n\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t  if (navigator.serviceWorker.controller) {\r\n\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t  'New content is available and will be used when all ' +\r\n\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\r\n\t\t\t\t);\r\n  \r\n\t\t\t\t// Execute callback\r\n\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t  config.onUpdate(registration);\r\n\t\t\t\t}\r\n\t\t\t  } else {\r\n\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\tconsole.log('Content is cached for offline use.');\r\n  \r\n\t\t\t\t// Execute callback\r\n\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t  config.onSuccess(registration);\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t}\r\n\t\t  };\r\n\t\t};\r\n\t  })\r\n\t  .catch((error) => {\r\n\t\tconsole.error('Error during service worker registration:', error);\r\n\t  });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t  headers: { 'Service-Worker': 'script' },\r\n\t})\r\n\t  .then((response) => {\r\n\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\tconst contentType = response.headers.get('content-type');\r\n\t\tif (\r\n\t\t  response.status === 404 ||\r\n\t\t  (contentType != null && contentType.indexOf('javascript') === -1)\r\n\t\t) {\r\n\t\t  // No service worker found. Probably a different app. Reload the page.\r\n\t\t  navigator.serviceWorker.ready.then((registration) => {\r\n\t\t\tregistration.unregister().then(() => {\r\n\t\t\t  window.location.reload();\r\n\t\t\t});\r\n\t\t  });\r\n\t\t} else {\r\n\t\t  // Service worker found. Proceed as normal.\r\n\t\t  registerValidSW(swUrl, config);\r\n\t\t}\r\n\t  })\r\n\t  .catch(() => {\r\n\t\tconsole.log('No internet connection found. App is running in offline mode.');\r\n\t  });\r\n  }\r\n  \r\n  export function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t  navigator.serviceWorker.ready\r\n\t\t.then((registration) => {\r\n\t\t  registration.unregister();\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t  console.error(error.message);\r\n\t\t});\r\n\t}\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorkerRegistration.register();\r\n  "],"sourceRoot":""}