{"version":3,"sources":["shared/hooks/http-hook.js","trees/pages/MapDeckGl.js"],"names":["useHttpClient","useState","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","MapDeckGl","mapRef","sourceData","setSourceData","userId","useContext","AuthContext","process","data1","trees","map","tree","type","properties","id","_id","date","owner","geometry","coordinates","location","lng","lat","fetchTrees","GoogleMapsOverlay","layers","GeoJsonLayer","data","opacity","filled","radiusMinPixels","radiusMaxPixels","getFillColor","d","getRadius","deckOverlay","setDeckOverlay","calculateColor","date1","Date","now","getTime","GMO","pickable","getPointRadius","onClick","handleClickOpen","object","setMap","React","open","setOpen","open2","setOpen2","idOfTree","setIdOfTree","setDateOfTree","ownerOfTree","setOwnerOfTree","title","setTitle","description","setDescription","id2","date2","owner2","JSON","stringify","handleClose2","handleClose","uid","tid","currentData","el","newElement","history","useHistory","sx","height","width","textAlign","margin","variant","component","style","bootstrapURLKeys","key","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","onClose","aria-labelledby","aria-describedby","disabled","autoFocus"],"mappings":"oLAEaA,EAAgB,WAC5B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,qBAA1B,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,iBAAO,IAE5BC,EAAcC,sBAAW,uCAC9B,WAAOC,GAAP,qCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAClDX,GAAa,GACPY,EAAgB,IAAIC,gBAC1BV,EAAmBW,QAAQC,KAAKH,GAHjC,kBAMyBI,MAAMT,EAAK,CACjCE,SACAC,OACAC,UACAM,OAAQL,EAAcK,SAVzB,cAMQC,EANR,iBAa6BA,EAASC,OAbtC,WAaQC,EAbR,OAeEjB,EAAmBW,QAAUX,EAAmBW,QAAQO,QACvD,SAACC,GAAD,OAAaA,IAAYV,KAGrBM,EAASK,GAnBhB,uBAoBS,IAAIC,MAAMJ,EAAaK,SApBhC,eAuBEzB,GAAa,GAvBf,kBAwBSoB,GAxBT,wCA0BElB,EAAS,KAAIuB,SACbzB,GAAa,GA3Bf,+DAD8B,sDAgC9B,IAaD,OANA0B,qBAAU,WACT,OAAO,WACNvB,EAAmBW,QAAQa,SAAQ,SAACC,GAAD,OAAeA,EAAUC,cAE3D,IAEI,CAAE9B,YAAWE,QAAOI,cAAayB,WAVrB,WAClB5B,EAAS,U,qXCzBE6B,EAAY,WAEvB,IAAQ1B,EAAgBR,cAAhBQ,YAGF2B,EAAS5B,mBAOf,EAAoCN,mBAAS,MAA7C,mBAAOmC,EAAP,KAAmBC,EAAnB,KAIMC,EADOC,qBAAWC,KACJF,OAIpBT,qBAAU,YACQ,uCAAG,8BAAAlB,EAAA,+EAEYH,EACzBiC,4CAHa,OAETlB,EAFS,OAKXmB,EAAQnB,EAAaoB,MAAMC,KAAI,SAACC,GAAD,MAAW,CAC5CC,KAAM,UACNC,WAAY,CACVC,GAAIH,EAAKI,IACTC,KAAML,EAAKK,KACXC,MAAON,EAAKM,OAEdC,SAAU,CACRN,KAAM,QACNO,YAAa,CAACR,EAAKS,SAASC,IAAKV,EAAKS,SAASE,UAGnDnB,EAAcK,GAjBC,yGAAH,qDAoBhBe,KACC,CAACjD,IAGJ,MAAsCP,mBACpC,IAAIyD,IAAkB,CACpBC,OAAQ,CACN,IAAIC,IAAa,CACfZ,GAAI,oBACJa,KAAMzB,EACN0B,QAAS,GACTC,QAAQ,EACRC,gBAAiB,EACjBC,gBAAiB,EACjBC,aAAc,SAACC,GAAD,MAAO,CAAC,IAAK,IAAK,IAChCC,UAAW,QAXnB,mBAAOC,EAAP,KAAoBC,EAApB,KAmBA,SAASC,EAAerB,EAAMC,GAC5B,GAAa,MAATA,EACF,OAAIA,GAASb,EACJ,CAAC,IAAK,EAAG,KACJ,CAAC,IAAK,IAAK,KAEzB,IAAIkC,EAAQ,IAAIC,KAAKvB,GACrB,OAAIuB,KAAKC,MAAQF,EAAMG,UAAY,WAC1B,CAAC,GAAI,IAAK,IACL,CAAC,EAAG,IAAK,KAK3B9C,qBAAU,WACR,IAAI+C,EAAM,IAAIlB,IAAkB,CAC9BC,OAAQ,CACN,IAAIC,IAAa,CACfZ,GAAI,oBACJa,KAAMzB,EACNyC,UAAU,EACVf,QAAS,GACTC,QAAQ,EACRC,gBAAiB,EACjBC,gBAAiB,EACjBC,aAAc,SAACC,GAAD,OACZI,EAAeJ,EAAEpB,WAAWG,KAAMiB,EAAEpB,WAAWI,QACjD2B,eAAgB,EAChBC,QAAS,SAACZ,GAAD,OACPa,GACEb,EAAEc,OAAOlC,WAAWC,GACpBmB,EAAEc,OAAOlC,WAAWG,KACpBiB,EAAEc,OAAOlC,WAAWI,aAK9ByB,EAAIM,OAAO/C,EAAOlB,SAClBqD,EAAeM,KACd,CAACxC,IAGJ,MAAwB+C,IAAMlF,UAAS,GAAvC,mBAAOmF,EAAP,KAAaC,EAAb,KACA,EAA0BF,IAAMlF,UAAS,GAAzC,mBAAOqF,EAAP,KAAcC,EAAd,KAEA,EAAgCtF,mBAAS,MAAzC,mBAAOuF,EAAP,KAAiBC,EAAjB,KACA,EAAoCxF,mBAAS,MAA7C,mBAAmByF,GAAnB,WACA,EAAsCzF,mBAAS,MAA/C,mBAAO0F,EAAP,KAAoBC,EAApB,KACA,GAA0B3F,mBAAS,oMAAnC,qBAAO4F,GAAP,MAAcC,GAAd,MACA,GAAsC7F,mBACpC,sWADF,qBAAO8F,GAAP,MAAoBC,GAApB,MAKMhB,GAAkB,SAACiB,EAAKC,EAAOC,GACnCV,EAAYQ,GACZP,EAAcQ,GACdN,EAAeO,GACD,MAAVA,GAAkBA,GAAU7D,GAC9BwD,GAAS,kLACTE,GAAe,uLACI,MAAVG,GAAkBA,GAAU7D,GACrCwD,GAAS,uIACTE,GACE,0TAGFI,KAAKC,UAAU9B,EAAe2B,EAAOC,KACrCC,KAAKC,UAAU,CAAC,EAAG,IAAK,OAExBP,GAAS,mSACTE,GACE,osBAGFF,GAAS,4IACTE,GACE,uWAGJX,GAAQ,IAIJiB,GAAe,WACnBf,GAAS,IAGLgB,GAAc,WAClBlB,GAAQ,IAzJmB,8CA6J7B,sBAAA1E,EAAA,+EAE+BH,EACzBiC,qCAAA,iBAA8C+C,EAA9C,UACA,QACAY,KAAKC,UAAU,CACbG,IAAKlE,EACLmE,IAAKjB,IAEP,CACE,eAAgB,qBAVxB,oEAcEnD,GAAc,SAACqE,GAQb,OAPUA,EAAY9D,KAAI,SAAC+D,GACzB,IAAIC,EAAU,eAAQD,GAItB,OAHIA,EAAG5D,WAAWC,IAAMwC,IACtBoB,EAAW7D,WAAWI,MAAQb,GAEzBsE,QAIXvB,GAAQ,GACRE,GAAS,GAzBX,0DA7J6B,sBA0L7B,IAAIsB,GAAUC,cAQd,OAAkB,MAAd1E,EAEA,oCACE,kBAAC,IAAD,CACE2E,GAAI,CACFC,OAAQ,QACRC,MAAO,OACPC,UAAW,SACXC,OAAQ,SAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,OAAnC,kHAIA,kBAAC,IAAD,CAAYD,QAAQ,SAClB,kBAAC,IAAD,UAQR,yBAAKE,MAAO,CAAEN,OAAQ,QAASC,MAAO,SACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEM,iBAAkB,CAChBC,IAAK/E,2CAEPgF,cA3NK,CACbjE,IAAK,QACLD,IAAK,SA0NGmE,YAAa,GACbC,oCAAkC,EAClCC,kBAAmB,YAAc,IAAXhF,EAAU,EAAVA,IACpBT,EAAOlB,QAAU2B,EACjByB,EAAYa,OAAOtC,OAIzB,kBAAC,IAAD,CACEwC,KAAMA,EACNyC,QAAStB,GACTuB,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAAC,IAAD,CAAa/E,GAAG,SAAS6C,IACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmB7C,GAAG,4BACnB+C,KAGL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQhB,QAASwB,IAAjB,8CACA,kBAAC,IAAD,CACExB,QAzPiB,4CA0PjBiD,SAAyB,MAAfrC,EACVsC,WAAS,GAHX,gFAUJ,kBAAC,IAAD,CACE7C,KAAME,EACNuC,QAASvB,GACTwB,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAAC,IAAD,CAAa/E,GAAG,sBACb,0PAEH,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBA,GAAG,4BAAtB,0UAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQ+B,QAtFlB,WACE8B,GAAQ3F,KAAK,YAqFL,uGACA,kBAAC,IAAD,CAAQ6D,QAASuB,GAAc2B,WAAS,GAAxC,sHAQG/F","file":"static/js/7.efbc5054.chunk.js","sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [error, setError] = useState();\r\n\r\n\tconst activeHttpRequests = useRef([]);\r\n\r\n\tconst sendRequest = useCallback(\r\n\t\tasync (url, method = \"GET\", body = null, headers = {}) => {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tconst httpAbortCtrl = new AbortController();\r\n\t\t\tactiveHttpRequests.current.push(httpAbortCtrl);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, {\r\n\t\t\t\t\tmethod,\r\n\t\t\t\t\tbody,\r\n\t\t\t\t\theaders,\r\n\t\t\t\t\tsignal: httpAbortCtrl.signal,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst responseData = await response.json();\r\n\r\n\t\t\t\tactiveHttpRequests.current = activeHttpRequests.current.filter(\r\n\t\t\t\t\t(reqCtrl) => reqCtrl !== httpAbortCtrl\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(responseData.message);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\treturn responseData;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tsetError(err.message);\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t\tthrow err;\r\n\t\t\t}\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\r\n\tconst clearError = () => {\r\n\t\tsetError(null);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tactiveHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn { isLoading, error, sendRequest, clearError };\r\n};\r\n","import DeckGL from \"@deck.gl/react\";\r\nimport { GeoJsonLayer } from \"@deck.gl/layers\";\r\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { GoogleMapsOverlay } from \"@deck.gl/google-maps\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport const MapDeckGl = () => {\r\n  //req const for sending an http req to the back\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  //const for the map, center is in the center of thessaloniki\r\n  const mapRef = useRef();\r\n  const center = {\r\n    lat: 40.6401,\r\n    lng: 22.9444,\r\n  };\r\n\r\n  //hook for the data (trees), set to null originially before fetching it from backend\r\n  const [sourceData, setSourceData] = useState(null);\r\n\r\n  //auth constants\r\n  const auth = useContext(AuthContext);\r\n  const userId = auth.userId;\r\n\r\n  //this useEffect hook fetches the trees, transforms the daya to geoJson \r\n  //and sets the sourceData to the geoJson (data1)\r\n  useEffect(() => {\r\n    const fetchTrees = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/trees\"\r\n        );\r\n        let data1 = responseData.trees.map((tree) => ({\r\n          type: \"Feature\",\r\n          properties: {\r\n            id: tree._id,\r\n            date: tree.date,\r\n            owner: tree.owner,\r\n          },\r\n          geometry: {\r\n            type: \"Point\",\r\n            coordinates: [tree.location.lng, tree.location.lat],\r\n          },\r\n        }));\r\n        setSourceData(data1);\r\n      } catch (err) {}\r\n    };\r\n    fetchTrees();\r\n  }, [sendRequest]);\r\n\r\n  //this hook is for the Deck.Gl. It generates the layer of data (dots) from the sourceData (trees)\r\n  const [deckOverlay, setDeckOverlay] = useState(\r\n    new GoogleMapsOverlay({\r\n      layers: [\r\n        new GeoJsonLayer({\r\n          id: \"scatterplot-layer\",\r\n          data: sourceData,\r\n          opacity: 0.8,\r\n          filled: true,\r\n          radiusMinPixels: 2,\r\n          radiusMaxPixels: 5,\r\n          getFillColor: (d) => [255, 140, 0],\r\n          getRadius: 5,\r\n        }),\r\n      ],\r\n    })\r\n  );\r\n\r\n\r\n  //this function calculates the color of the trees based on the owner and date planted\r\n  function calculateColor(date, owner) {\r\n    if (owner != null) {\r\n      if (owner == userId) {\r\n        return [255, 0, 255];\r\n      } else return [192, 192, 192];\r\n    } else {\r\n      let date1 = new Date(date);\r\n      if (Date.now() - date1.getTime() > 94670856000) {\r\n        return [42, 148, 27];\r\n      } else return [0, 130, 255];\r\n    }\r\n  }\r\n\r\n  //this connects the layer with the google maps\r\n  useEffect(() => {\r\n    let GMO = new GoogleMapsOverlay({\r\n      layers: [\r\n        new GeoJsonLayer({\r\n          id: \"scatterplot-layer\",\r\n          data: sourceData,\r\n          pickable: true,\r\n          opacity: 0.8,\r\n          filled: true,\r\n          radiusMinPixels: 1,\r\n          radiusMaxPixels: 5,\r\n          getFillColor: (d) =>\r\n            calculateColor(d.properties.date, d.properties.owner),\r\n          getPointRadius: 2,\r\n          onClick: (d) =>\r\n            handleClickOpen(\r\n              d.object.properties.id,\r\n              d.object.properties.date,\r\n              d.object.properties.owner\r\n            ),\r\n        }),\r\n      ],\r\n    });\r\n    GMO.setMap(mapRef.current);\r\n    setDeckOverlay(GMO);\r\n  }, [sourceData]);\r\n\r\n  //constants needed for the popups when clicked\r\n  const [open, setOpen] = React.useState(false);\r\n  const [open2, setOpen2] = React.useState(false);\r\n\r\n  const [idOfTree, setIdOfTree] = useState(null);\r\n  const [dateOfTree, setDateOfTree] = useState(null);\r\n  const [ownerOfTree, setOwnerOfTree] = useState(null);\r\n  const [title, setTitle] = useState(\"Θέλετε να υιοθετήσετε αυτό το δέντρο;\");\r\n  const [description, setDescription] = useState(\r\n    \"Θέλετε να υιοθετήσετε αυτό το δέντρο; Η υιοθεσία είναι μεγάλη ευθύνη!\"\r\n  );\r\n\r\n  //based on the id date and owner, various popups of text show up\r\n  const handleClickOpen = (id2, date2, owner2) => {\r\n    setIdOfTree(id2);\r\n    setDateOfTree(date2);\r\n    setOwnerOfTree(owner2);\r\n    if (owner2 != null && owner2 != userId) {\r\n      setTitle(\"Αυτό το δέντρο έχει ήδη ιδιοκτήτη!\");\r\n      setDescription(\"Παρακαλούμε επιλέξτε άλλο δέντρο!\");\r\n    } else if (owner2 != null && owner2 == userId) {\r\n      setTitle(\"Αυτό το δέντρο σας ανήκει!\");\r\n      setDescription(\r\n        \"Αν θέλετε να υιοθετήσετε, παρακαλούμε επιλέξτε άλλο δέντρο!\"\r\n      );\r\n    } else if (\r\n      JSON.stringify(calculateColor(date2, owner2)) ==\r\n      JSON.stringify([0, 130, 255])\r\n    ) {\r\n      setTitle(\"Αυτό το δέντρο είναι ακόμα νέο, θέλετε να το υιοθετήσετε;\");\r\n      setDescription(\r\n        \"Αυτό το δέντρο είναι μπλέ γιατί είναι ακόμα νέο. Τα νεά δέντρα απαιτούν περισσότερο πότισμα. Είστε σίγουροι πως θέλετε να το υιοθετήσετε;\"\r\n      );\r\n    } else {\r\n      setTitle(\"Υιοθετήστε αυτό το δέντρο;\");\r\n      setDescription(\r\n        \"Θέλετε να υιοθετήσετε αυτό το δέντρο; Η υιοθεσία είναι μεγάλη ευθύνη!\"\r\n      );\r\n    }\r\n    setOpen(true);\r\n  };\r\n\r\n  //to close the popups\r\n  const handleClose2 = () => {\r\n    setOpen2(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  //async function that handles the adoption\r\n  async function handleAdopt() {\r\n    try {\r\n      const responseData = await sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL + `/trees/${idOfTree}/adopt`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          uid: userId,\r\n          tid: idOfTree,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n        }\r\n      );\r\n    } catch (err) {}\r\n    setSourceData((currentData) => {\r\n      let arr = currentData.map((el) => {\r\n        let newElement = { ...el };\r\n        if (el.properties.id == idOfTree) {\r\n          newElement.properties.owner = userId;\r\n        }\r\n        return newElement;\r\n      });\r\n      return arr;\r\n    });\r\n    setOpen(false);\r\n    setOpen2(true);\r\n  }\r\n\r\n  //history for the router of pages\r\n  let history = useHistory();\r\n  function handleRedirect2trees() {\r\n    history.push(\"/trees\");\r\n  }\r\n\r\n  //if there is no data (delay while we get the trees) doesnt display an empty map with no trees\r\n  //but displays a loading screen. Else it displays the google map with various dialogs that are..\r\n  //.. all initially not open.\r\n  if (sourceData == null) {\r\n    return (\r\n      <>\r\n        <Card\r\n          sx={{\r\n            height: \"100vh\",\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            margin: \"auto\",\r\n          }}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"div\">\r\n              38441 δέντρα φορτώνουν 🌳\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\">\r\n              <CircularProgress />\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </>\r\n    );\r\n  } else\r\n    return (\r\n      <div style={{ height: \"100vh\", width: \"100%\" }}>\r\n        <DeckGL>\r\n          <GoogleMapReact\r\n            bootstrapURLKeys={{\r\n              key: process.env.REACT_APP_GOOGLE_API_KEY,\r\n            }}\r\n            defaultCenter={center}\r\n            defaultZoom={15}\r\n            yesIWantToUseGoogleMapApiInternals\r\n            onGoogleApiLoaded={({ map }) => {\r\n              mapRef.current = map;\r\n              deckOverlay.setMap(map);\r\n            }}\r\n          ></GoogleMapReact>\r\n        </DeckGL>\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"Title\">{title}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {description}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose}>ΑΚΥΡΩΣΗ</Button>\r\n            <Button\r\n              onClick={handleAdopt}\r\n              disabled={ownerOfTree != null}\r\n              autoFocus\r\n            >\r\n              ΥΙΟΘΕΤΗΣΤΕ ΤΟ!\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n          open={open2}\r\n          onClose={handleClose2}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"Adopt notification\">\r\n            {\"Συγχαρητήρια! Υιοθετήσατε ένα δέντρο επιτυχώς!\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Θέλετε να δείτα τα δέντρα σας, ή να υιοθετήσετε ακόμα ένα δέντρο;\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleRedirect2trees}>ΔΕΙΤΕ ΤΑ ΔΕΝΤΡΑ ΣΑΣ</Button>\r\n            <Button onClick={handleClose2} autoFocus>\r\n              ΥΙΟΘΕΤΗΣΤΕ ΑΚΟΜΑ ΕΝΑ\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n};\r\nexport default MapDeckGl;\r\n"],"sourceRoot":""}